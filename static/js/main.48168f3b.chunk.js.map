{"version":3,"sources":["components/Navbar/Navbar.js","components/Form/Form.js","components/Employees/Employees.js","App.js","serviceWorker.js","index.js"],"names":["Navbar","className","href","Form","props","onChange","handleCategory","type","name","id","handleInputChange","value","input","onClick","handleSubmit","Employees","employee","full_name","email","gender","country","department","App","state","search","category","selected","event","setState","target","toLowerCase","preventDefault","this","db","map","renderEmployees","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"sjLAUeA,EARA,WACb,OACE,yBAAKC,UAAU,sDACb,uBAAGA,UAAU,0BAA0BC,KAAK,cAA5C,wBC4BSC,EA/BF,SAAAC,GACX,OACE,8BACE,6CACA,4BACEH,UAAU,eACVI,SAAUD,EAAME,gBAChB,0CACA,2CACA,+CAEF,yCACA,2BACEL,UAAU,eACVM,KAAK,OACLC,KAAK,QACLC,GAAG,OACHJ,SAAUD,EAAMM,kBAChBC,MAAOP,EAAMQ,QAEf,4BACEL,KAAK,SACLN,UAAU,eACVY,QAAST,EAAMU,cAHjB,YCLSC,G,MAdG,SAAAX,GAChB,OACE,yBAAKH,UAAU,qCACb,yBAAKA,UAAU,eAAeG,EAAMY,SAASC,WAC7C,yBAAKhB,UAAU,aACb,uBAAGA,UAAU,aAAb,UAAiCG,EAAMY,SAASE,OAChD,uBAAGjB,UAAU,aAAb,WAAkCG,EAAMY,SAASG,QACjD,uBAAGlB,UAAU,aAAb,YAAmCG,EAAMY,SAASI,SAClD,uBAAGnB,UAAU,aAAb,eAAsCG,EAAMY,SAASK,gB,OCwE9CC,E,4MA3EbC,MAAQ,CACNX,MAAO,GACPY,OAAQ,GACRC,SAAU,GACVC,SAAU,I,EAGZhB,kBAAoB,SAAAiB,GAClB,EAAKC,SAAL,eAAiBD,EAAME,OAAOrB,KAAOmB,EAAME,OAAOlB,S,EAGpDL,eAAiB,SAAAqB,GACf,EAAKC,SAAS,CAAEH,SAAUE,EAAME,OAAOlB,MAAMmB,iB,EAG/ChB,aAAe,SAAAa,GACbA,EAAMI,iBACN,EAAKH,SAAS,CACZhB,MAAO,GACPY,OAAQ,EAAKD,MAAMX,MACnBa,SAAU,GACVC,SAAU,EAAKH,MAAME,Y,8DAITA,GAAW,IAAD,OACxB,MAA0B,KAAtBO,KAAKT,MAAMC,OACNS,EAAGC,KAAI,SAAAlB,GACZ,OAAQS,GACN,IAAK,SACH,GAAIT,EAASG,SAAW,EAAKI,MAAMC,OACjC,OAAO,kBAAC,EAAD,CAAWR,SAAUA,IAE9B,MACF,IAAK,UACH,GAAIA,EAASI,UAAY,EAAKG,MAAMC,OAClC,OAAO,kBAAC,EAAD,CAAWR,SAAUA,IAE9B,MACF,IAAK,aACH,GAAIA,EAASK,aAAe,EAAKE,MAAMC,OACrC,OAAO,kBAAC,EAAD,CAAWR,SAAUA,QAM7BiB,EAAGC,KAAI,SAAAlB,GAAQ,OAAI,kBAAC,EAAD,CAAWA,SAAUA,S,+BAKjD,OACE,oCACE,kBAAC,EAAD,MACA,yBAAKf,UAAU,aACb,yBAAKA,UAAU,OACb,yBAAKA,UAAU,UACb,kBAAC,EAAD,CACEW,MAAOoB,KAAKT,MAAMX,MAClBN,eAAgB0B,KAAK1B,eACrBI,kBAAmBsB,KAAKtB,kBACxBI,aAAckB,KAAKlB,iBAIzB,yBAAKb,UAAU,OACZ+B,KAAKG,gBAAgBH,KAAKT,MAAMG,iB,GArE3BU,aCMEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SD0HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.48168f3b.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nconst Navbar = () => {\r\n  return(\r\n    <nav className=\"navbar navbar-light bg-dark justify-content-center\">\r\n      <a className=\"navbar-brand text-white\" href=\"google.com\">Employee Directory</a>\r\n    </nav>\r\n  )\r\n}\r\n\r\nexport default Navbar","import React from 'react'\n\nconst Form = props => {\n  return (\n    <form>\n      <label>Categories</label>\n      <select\n        className=\"form-control\"\n        onChange={props.handleCategory}>\n        <option>Gender</option>\n        <option>Country</option>\n        <option>Department</option>\n      </select>\n      <label>Search</label>\n      <input\n        className=\"form-control\"\n        type=\"text\"\n        name=\"input\"\n        id=\"name\"\n        onChange={props.handleInputChange}\n        value={props.input}\n      />\n      <button\n        type=\"button\"\n        className=\"btn btn-info\"\n        onClick={props.handleSubmit}\n      >\n      Submit\n      </button>\n    </form>\n  )\n}\n\nexport default Form\n","import React from 'react'\r\nimport './Employees.css'\r\n\r\nconst Employees = props => {\r\n  return (\r\n    <div className=\"card text-white bg-secondary mb-3\">\r\n      <div className=\"card-header\">{props.employee.full_name}</div>\r\n      <div className=\"card-body\">\r\n        <p className=\"card-text\">Email: {props.employee.email}</p>\r\n        <p className=\"card-text\">Gender: {props.employee.gender}</p>\r\n        <p className=\"card-text\">Country: {props.employee.country}</p>\r\n        <p className=\"card-text\">Department: {props.employee.department}</p>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Employees\r\n","import React, { Component } from 'react'\nimport Navbar from './components/Navbar'\nimport Form from './components/Form'\nimport Employees from './components/Employees'\nimport db from './db/db.json'\n\nclass App extends Component {\n\n  state = {\n    input: '',\n    search: '',\n    category: '',\n    selected: ''\n  }\n\n  handleInputChange = event => {\n    this.setState({ [event.target.name]: event.target.value })\n  }\n\n  handleCategory = event => {\n    this.setState({ category: event.target.value.toLowerCase() })\n  }\n\n  handleSubmit = event => {\n    event.preventDefault()\n    this.setState({\n      input: '',\n      search: this.state.input,\n      category: '',\n      selected: this.state.category\n    })\n  }\n\n  renderEmployees(category) {\n    if (this.state.search !== '') {\n      return db.map(employee => {\n        switch (category) {\n          case 'gender':\n            if (employee.gender === this.state.search) {\n              return <Employees employee={employee} />\n            }\n            break\n          case 'country':\n            if (employee.country === this.state.search) {\n              return <Employees employee={employee} />\n            }\n            break\n          case 'department':\n            if (employee.department === this.state.search) {\n              return <Employees employee={employee} />\n            }\n            break\n        }\n      })\n    } else {\n      return db.map(employee => <Employees employee={employee} />)\n    }\n  }\n\n  render() {\n    return (\n      <>\n        <Navbar />\n        <div className=\"container\">\n          <div className=\"row\">\n            <div className=\"col-12\">\n              <Form \n                input={this.state.input}\n                handleCategory={this.handleCategory}\n                handleInputChange={this.handleInputChange}\n                handleSubmit={this.handleSubmit}\n              />\n            </div>\n          </div>\n          <div className=\"row\">\n            {this.renderEmployees(this.state.selected)}\n          </div>\n        </div>\n      </>\n    )\n  }\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}